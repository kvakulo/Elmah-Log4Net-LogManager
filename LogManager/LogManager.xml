<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LogManager</name>
    </assembly>
    <members>
        <member name="M:LogManager.Helpers.ParseExtension.Parse``1(System.String)">
            <summary>
            Parse any string to a base type utulizing the types built in TryParse Method
            </summary>
            <typeparam name="T">Return Type</typeparam>
            <param name="thingToParse">The string you want to parse</param>
            <returns></returns>
        </member>
        <member name="M:LogManager.Helpers.ParseExtension.Parse``1(System.String,``0)">
            <summary>
            Parse any string to a base type utulizing the types built in TryParse Method
            </summary>
            <typeparam name="T">Return Type</typeparam>
            <param name="thingToParse">The string you want to parse</param>
            <param name="defaultValue">The default value to return if parsing fails</param>
            <returns></returns>
        </member>
        <member name="M:LogManager.Helpers.ParseExtension.Parse``1(System.String,System.Func{System.String,``0})">
            <summary>
            Parse any string into something else by providing a custom parsing function
            </summary>
            <typeparam name="T">Complex OutPut Type expected back</typeparam>
            <param name="thingToParse">The string you want to parse</param>
            <param name="parser">The func that takes your sting and turns it into your output type</param>
            <returns></returns>
        </member>
        <member name="F:LogManager.Helpers.ParseExtension._knownParsers">
            <summary>
            An in memory collection of nuts we've already cracked
            </summary>
        </member>
        <member name="M:LogManager.Helpers.ParseExtension.GetNullableParsers">
            <summary>
            A collection of transformations to map nullable types to there sisters
            </summary>
            <returns></returns>
        </member>
        <member name="M:LogManager.Helpers.ParseExtension.GetTryParse(System.Type)">
            <summary>
            Looks Up The Tryparse method of the provided type
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
